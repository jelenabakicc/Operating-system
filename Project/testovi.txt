//int flag;
//class DummyThread: public Thread {
//public:
//	int i;
//	Semaphore* sem_wait;
//	Semaphore* sem_signal;
//	Semaphore* sleep_sem;
//	void run() {
////		while(flag != i);
//		sem_wait->wait(0);
//		sleep_sem->wait(18);
//		cout << "Dummy nit!" << i  << endl;
//		sem_signal->signal();
//		flag++;
//	}
//
//	~DummyThread() {
//		waitToComplete();
//	}
//};
//
////int userMain(int argc, char** argv);
//int userMain(int argc, char** argv) {
//	DummyThread thrd[20];
//	Semaphore *sem[21];
//	Semaphore sleep_sem = Semaphore(0);
//	int i;
//
//	flag = 0;
//
//	for (i = 0; i < 21; ++i) {
//		sem[i] = new Semaphore(0);
//	}
//
//	sem[0]->signal();
//	for (i = 0; i < 20; ++i) {
//		thrd[i].i = i;
//		thrd[i].sem_wait = sem[i];
//		thrd[i].sem_signal = sem[i + 1];
//		thrd[i].sleep_sem = &sleep_sem;
//		thrd[i].start();
//	}
//
//	sem[20]->wait(0);
//	for (i = 0; i < 20; ++i) {
//		thrd[i].waitToComplete();
//	}
//
//	for (i = 0; i < 21; ++i) {
//		delete sem[i];
//	}
//
//
//	cout << "Dummy zavrsila!" << endl;
//
//	return 0;
//}



//////////////////          TEST 1            /////////////////
/*
	Test: cekanje niti
*/

//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread() {};
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//	//int i;
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread" << getId() << " loop1 starts" << endl;
//
//	for(int i=0;i<32000;i++)
//	{
//		for (int j = 0; j < 32000; j++);
//	}
//
//	cout << "Thread " << getId() <<" loop1 ends, dispatch" <<endl;
//
//	dispatch();
//
//	cout << "Thread " << getId() << " loop2 starts" << endl;
//
//	for (int k = 0; k < 20000; k++);
//
//	cout << "Thread " << getId() << " loop2 ends" << endl;
//
//
//}
//
//class WaitThread: public Thread
//{
//private:
//	TestThread *t1_,*t2_;
//
//public:
//	WaitThread(TestThread *t1, TestThread *t2): Thread()
//	{
//		t1_ = t1;
//		t2_ = t2;
//	};
//
//	~WaitThread()
//		{
//			waitToComplete();
//		}
//
//protected:
//
//	void run()
//	{
//		cout << "Starting tests..." << endl;
//		t1_->waitToComplete();
//		cout << "Test 1 completed!" << endl;
//		t2_->waitToComplete();
//		cout << "Test 2 completed!" << endl;
//	}
//};
//
//void tick() {}
//
//int userMain(int argc, char** argv)
//{
//	cout << "User main starts" << endl;
//	TestThread t1,t2;
//	WaitThread w(&t1,&t2);
//	t1.start();
//	t2.start();
//	w.start();
//	cout << "User main ends" << endl;
//	return 16;
//}


////////////////////////////////////////////////////////////////////////



////////////////////////        TEST 2      //////////////////////////////
/*
	Test: asinhrono preuzimanje
*/

//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread() {};
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread " << getId() <<" loop1 starts" <<endl;
//
//	for(int i=0;i<32000;i++)
//	{
//		for (int j = 0; j < 32000; j++);
//	}
//
//	cout <<"Thread " << getId() <<" loop1 ends, dispatch" << endl;
//
//	dispatch();
//
//	//syncPrintf("Thread %d: loop2 starts\n",getId());
//
//	for (int k = 0; k < 20000; k++);
//
//	cout <<"Thread " <<getId() <<" loop2 ends" <<endl;
//
//}
//
//
//
//void tick(){}
//
//int userMain(int argc, char** argv)
//{
//	cout << "User main starts" << endl;
//	TestThread t1,t2;
//	t1.start();
//	t2.start();
//	cout << "User main ends" << endl;
//	return 16;
//}

/////////////////////////////////////////////////////////////////////




//////////////////////     TEST 3        ////////////////////////////
/*
	Test: dohvatanje i pretraga po ID
*/

//const int n = 16;
//
//void tick(){}
//
//class TestThread : public Thread
//{
//	public:
//	TestThread(): Thread(4096,2) {};
//	~TestThread()
//	{
//		waitToComplete();
//	}
//	protected:
//	void run();
//};
//void TestThread::run()
//{
//	int buffer=2;
//	for(int i=0;i<32000;i++)
//	{
//		buffer = 4096/2048;
//		for (int j = 0; j < 1024; j++)
//		{
//			buffer = buffer*2;
//			if(buffer%2)
//				buffer = 2;
//		}
//	}
//}
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts:" << 20 << " threads."<< endl;
//	int i;
//	TestThread threads[19];
//	for(i=0;i<20;i++)
//	{
//		threads[i].start();
//	}
//	for(i=0;i<20;i++)
//	{
//		threads[i].waitToComplete();
//
//		cout << Thread::getThreadById(i)->getId() << " Done!" << endl;
//	}
//	cout << "Test ends." << endl;
//	return 0;
//}



/////////////////////////////////////////////////////////////////////////




//////////////////////     TEST 4        ////////////////////////////
/*
 	 Test: razlicita vremena izvrsavanja i velicine steka
*/

//volatile Time ts;
//
//void tick()
//{
//	MASK_INTS;
//	cout << "timeSlice = " << ts << endl;
//	UNMASK_INTS;
//}
//
//class TestThread : public Thread
//{
//private:
//	Time myTimeSlice;
//public:
//
//	TestThread(StackSize stackSize, Time timeSlice): Thread(stackSize,timeSlice), myTimeSlice(timeSlice) {};
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	for(unsigned i=0;i<32000;i++)
//	{
//		for(unsigned int j=0;j<32000;j++)
//		{
//			ts = myTimeSlice;
//		}
//	}
//}
//
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts." << endl;
//	TestThread t1(64,1), t2(4096,32), t3(1024,16), t4(4096,0);
//	t1.start();
//	t2.start();
//	t3.start();
//	t4.start();
//	t1.waitToComplete();
//	t2.waitToComplete();
//	t3.waitToComplete();
//	t4.waitToComplete();
//	cout << "Test ends." << endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////



//////////////////////     TEST 5        ////////////////////////////   NE RADIIIIIIII
/*
 	 Test: frekventni dispatch
*/

//const int n = 10;
//
//void tick(){}
//
//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread(){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	for(int i=0;i<32000;i++)
//	{
//		for(int j=0;j<16;j++){
//		dispatch();
//		MASK_INTS;
//		cout << ".";
//		UNMASK_INTS;
//		}
//	}
//}
//
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts." <<endl;
//	TestThread t[n];
//	int i;
//	for(i=0;i<n;i++)
//	{
//		t[i].start();
//	}
//	for(i=0;i<n;i++)
//	{
//		t[i].waitToComplete();
//	}
//	cout << "Test ends." << endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 6        ////////////////////////////
/*
 	 Test: idleThread
*/


//void tick(){}
//
//class TestThread : public Thread
//{
//private:
//	TestThread *t;
//
//public:
//
//	TestThread(TestThread *thread): Thread(), t(thread){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Nit" << getId() << "starts." <<endl;
//	t->waitToComplete();
//}
//
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts." << endl;
//	TestThread *t1,*t2;
//	t1 = new TestThread(t2);
//	t2 = new TestThread(t1);
//	t1->start();
//	t2->start();
//	delete t1;
//	delete t2;
//	cout << "Test ends." << endl;
//	return 0;
//}


/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 7        ////////////////////////////
/*
 	 Test: Semafori bez realizacije spavanja, deo javnog testa
*/

//const int n = 10;
//int count = 100;
//Semaphore mutex(1);
//
//int mutex_glb = 1;
//
//void mutex_glb_wait(){
// sloop:asm{
//	mov ax, 0
//	xchg ax, mutex_glb
//}
// if(_AX ==0){
//	dispatch();
//	asm jmp sloop;
// }
//}
//
//
//#define intLock mutex_glb_wait();
//#define intUnlock mutex_glb = 1;
//
//
//class BoundedBuffer {
//public:
//
//	BoundedBuffer (unsigned size);
//	virtual ~BoundedBuffer ();
//	int append (char);
//	char take ();
//	int  fullCount(){return itemAvailable.val();};    // potrebno consumeru
//
//private:
//	unsigned Size;
//	Semaphore mutexa, mutext;
//	Semaphore spaceAvailable, itemAvailable;
//	char* buffer;
//	int head, tail;
//
//};
//
//BoundedBuffer::BoundedBuffer (unsigned size) : Size(size),
//	mutexa(1), mutext(1), spaceAvailable(size), itemAvailable(0),
//	head(0), tail(0) {
//		buffer = new char[size];
//		if (!buffer) exit(1);
//	}
//
//BoundedBuffer::~BoundedBuffer(){
//	intLock
//	delete [] buffer;
//	intUnlock
//}
//
//int BoundedBuffer::append (char d) {
//	spaceAvailable.wait(0);
//	mutexa.wait(0);
//		buffer[tail] = d;
//		tail = (tail+1)%Size;
//	mutexa.signal();
//	itemAvailable.signal();
//	return 0;
//}
//
//char BoundedBuffer::take () {
//	itemAvailable.wait(0);
//	mutext.wait(0);
//		char d = buffer[head];
//		head = (head+1)%Size;
//	mutext.signal();
//	spaceAvailable.signal();
//	return d;
//}
//
//BoundedBuffer buffer(n/2);
//
//class Producer: public Thread
//{
//public:
//	Producer(): Thread() {};
//	~Producer()
//	{
//		waitToComplete();
//	}
//
//protected:
//	void run()
//	{
//		char c;
//		while(count>0)
//		{
//			c = 65+(rand()%25);
//			buffer.append(c);
//			cout << count << " Producer" <<Thread::getRunningId() << "puts " << c << endl;
//			mutex.wait(0);
//			count--;
//			mutex.signal();
//		}
//	}
//};
//
//class Consumer: public Thread
//{
//public:
//	Consumer(): Thread() {};
//	~Consumer()
//	{
//		waitToComplete();
//	}
//
//protected:
//	void run()
//	{
//		char c;
//		while(count>0)
//		{
//			c = buffer.take();
//			cout << count << " Consumer " << Thread::getRunningId() << "gets" << c <<endl;
//			mutex.wait(0);
//			count--;
//			mutex.signal();
//		}
//	}
//};
//
//void tick(){}
//
//int userMain(int argc, char** argv)
//{
//	cout <<"Test starts." <<endl;
//	Producer p;
//	Consumer c;
//	p.start();
//	c.start();
//	cout <<"Test ends." <<endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 8        ////////////////////////////
/*
 	 Test: Semafori bez realizacije spavanja
*/

//const int n = 5;
//int count = 10;
//
//Semaphore s(2);
//
//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread(){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	s.wait(0);
//	cout<<"Thread "<<getId()<<" in critical section."<<endl;
//	for(unsigned int i=0;i<64000;i++)
//		for(unsigned int j=0;j<64000;j++);
//	s.signal();
//}
//
//void tick(){}
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts." << endl;
//	TestThread t[n];
//	int i;
//	for(i=0;i<n;i++)
//	{
//		t[i].start();
//	}
//	for(i=0;i<n;i++)
//	{
//		t[i].waitToComplete();
//	}
//	cout << "Test ends." << endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 9        ////////////////////////////
/*
 	 Test: Semafori sa spavanjem
*/

//const int n = 1;
//int t=-1;
//
//Semaphore s(0);
//
//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread(){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread waits for 10 units of time..." <<endl;
//	t=0;
//	s.wait(10);
//	cout << "Thread finished." <<endl;
//	s.signal();
//}
//
//void tick()
//{
//	t++;
//	if(t)
//		cout << t <<endl;
//}
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts." <<endl;
//	TestThread t[n];
//	int i;
//	for(i=0;i<n;i++)
//	{
//		t[i].start();
//	}
//	for(i=0;i<n;i++)
//	{
//		t[i].waitToComplete();
//	}
//	cout << "Test ends." <<endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 10        ////////////////////////////
/*
 	 Test: Semafori sa spavanjem 2
*/

//int t=-1;
//
//Semaphore s(0);
//
//class TestThread : public Thread
//{
//private:
//	Time waitTime;
//
//public:
//
//	TestThread(Time WT): Thread(), waitTime(WT){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread " << getId() << " waits for " << waitTime << " units of time." << endl;
//	int r = s.wait(waitTime);
//	s.signal();
//	cout <<"Thread "<< getId() << " finished: r = " <<r << endl;
//}
//
//void tick()
//{
//	t++;
//	if(t)
//		cout <<t <<endl;
//}
//
//int userMain(int argc, char** argv)
//{
//	cout <<"Test starts." <<endl;
//	TestThread t1(15),t2(10),t3(30);
//	t1.start();
//	t2.start();
//	t3.start();
//	s.wait(5);
//	s.signal();
//	s.wait(0);
//	s.signal();
//	cout <<"Test ends." << endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 11        ////////////////////////////
/*
 	 Test: Semafori sa spavanjem 3
*/

//int t=-1;
//
//Semaphore s(0);
//
//class TestThread : public Thread
//{
//private:
//	Time waitTime;
//
//public:
//
//	TestThread(Time WT): Thread(), waitTime(WT){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread " << getId() << " waits for " << waitTime << " units of time." << endl;
//	int r = s.wait(waitTime);
//	s.signal();
//	cout <<"Thread "<< getId() << " finished: r = " <<r << endl;
//}
//
//void tick()
//{
//	/*
//	t++;
//	if(t)
//		syncPrintf("%d\n",t);
//		*/
//}
//
//
//#include <iostream.h>
//
//Semaphore* mutex = 0;
//
//class Znak : public Thread
//{
//public:
//	Znak(char znak, int n) : Thread(), znak(znak), n(n) {}
//	virtual ~Znak() { waitToComplete(); }
//
//	void run()
//	{
//		for (long i = 0; i < 100000; i++)
//		{
//			if (mutex->wait(n)) {
//				cout << znak;
//				mutex->signal();
//			}
//
//		}
//
//		if (mutex->wait(n)) {
//			cout << endl << znak << " finished" << endl;
//			mutex->signal();
//		}
//	}
//
//private:
//	char znak;
//	int n;
//
//};
//
//
//int userMain(int argc, char* argv[]) {
//	mutex = new Semaphore(1);
//
//	Znak* a = new Znak('a', 10);
//	Znak* b = new Znak('b', 15);
//	Znak* c = new Znak('c', 20);
//
//	a->start();
//	b->start();
//	c->start();
//
//	delete a;
//	delete b;
//	delete c;
//
//	if (mutex->wait(1)) {
//		cout << endl << "userMain finished" << endl;
//		mutex->signal();
//	}
//
//	delete mutex;
//
//
//
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


////////////////////////     TEST 12        ////////////////////////////
///*
// 	 Test: Semafori sa spavanjem 4
//*/
//
//
//
//int t=-1;
//
//const int n=15;
//
//Semaphore s(1);
//
//class TestThread : public Thread
//{
//private:
//	Time waitTime;
//
//public:
//
//	TestThread(Time WT): Thread(), waitTime(WT){}
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//	cout << "Thread " << getId() << " waits for " << waitTime << " units of time." << endl;
//	int r = s.wait(waitTime);
//	if(getId()%2){
//		s.signal();}
//	cout <<"Thread "<< getId() << " finished: r = " << r << endl;
//}
//
//void tick()
//{
//	t++;
//	if(t)
//		cout << t <<endl;
//}
//
//int userMain(int argc, char** argv)
//{
//	cout <<"Test starts." <<endl;
//	TestThread* t[n];
//	int i;
//	for(i=0;i<n;i++)
//	{
//		t[i] = new TestThread(5*(i+1));
//		t[i]->start();
//	}
//	for(i=0;i<n;i++)
//	{
//		t[i]->waitToComplete();
//	}
//	delete t;
//	cout <<"Test ends." <<endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 13        ////////////////////////////
/*
	Test: dogadjaji
*/


//
//PREPAREENTRY(9,1);
//
//Semaphore* mutex = 0;
//Semaphore* sleepSem = 0;
//
//void tick() {}
//
//
//class Znak : public Thread
//{
//public:
//	Znak(char znak, int n) : Thread(), znak(znak), n(n) {}
//	virtual ~Znak() { waitToComplete(); }
//
//	void run()
//	{
//		// for (long i = 0; i < 100000; i++)
//		for (int i = 0; i < n; i++)
//		{
//			if (mutex->wait(1)) {
//				cout << znak;
//				mutex->signal();
//			}
//
//			// for (int j = 0; j < 10000; j++)
//				// for (int k = 0; k < 10000; k++);
//			Time sleepTime = 2 + rand() % 8;
//			sleepSem->wait(sleepTime);
//
//			// dispatch();
//		}
//
//		if (mutex->wait(1)) {
//			cout << endl << znak << " finished" << endl;
//			mutex->signal();
//		}
//	}
//
//private:
//	char znak;
//	int n;
//
//};
//
//
//class Key : public Thread {
//public:
//	Key(int n) : Thread(), n(n) {}
//	virtual ~Key() { waitToComplete(); }
//
//	void run() {
//		Event e(9);
//
//		for (int i = 0; i < n; i++) {
//			if (mutex->wait(1)) {
//				cout << endl << "key waiting " << (i + 1) << endl;
//				mutex->signal();
//			}
//
//			e.wait();
//
//			if (mutex->wait(1)) {
//				cout << endl << "key continue " << (i + 1) << endl;
//				mutex->signal();
//			}
//
//			sleepSem->wait(5);
//		}
//
//		if (mutex->wait(1)) {
//			cout << endl << "key finished" << endl;
//			mutex->signal();
//		}
//	}
//
//private:
//	int n;
//
//};
//
//
//int userMain(int argc, char* argv[]) {
//	mutex = new Semaphore(1);
//	sleepSem = new Semaphore(0);
//
//	Znak* a = new Znak('a', 10);
//	Znak* b = new Znak('b', 15);
//	Znak* c = new Znak('c', 20);
//	Key* k = new Key(150);
//
//	a->start();
//	b->start();
//	c->start();
//	k->start();
//
//	delete a;
//	delete b;
//	delete c;
//	delete k;
//
//	if (mutex->wait(1)) {
//		cout << endl << "userMain finished" << endl;
//		mutex->signal();
//	}
//
//	delete sleepSem;
//	delete mutex;
//
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 14        ////////////////////////////
/*
	Test: brojac sekundi
*/

//unsigned t=18;
//unsigned seconds = 5;
//
//void secondPast()
//{
//	if(seconds)
//		cout << seconds <<endl;
//	seconds--;
//}
//
//void tick()
//{
//	t--;
//	if(t==0){
//		t = 18;
//		secondPast();
//	}
//}
//
//
//
//int userMain(int argc, char** argv)
//{
//	cout << "Starting test" << endl;
//	while(seconds);
//	cout << "Test ends" <<endl;
//	return 0;
//}

/////////////////////////////////////////////////////////////////////


//////////////////////     TEST 15        ////////////////////////////
/*
	Test: Niti maxStack velicine
*/

//const int n = 2;
//
//void tick(){}
//
//class TestThread : public Thread
//{
//public:
//
//	TestThread(): Thread(32768,2) {};
//	~TestThread()
//	{
//		waitToComplete();
//	}
//protected:
//
//	void run();
//
//};
//
//void TestThread::run()
//{
//
//	int buffer=2;
//
//	for(int i=0;i<32000;i++)
//	{
//		buffer = 4096/2048;
//		for (int j = 0; j < 1024; j++)
//		{
//			buffer = buffer*2;
//			if(buffer%2)
//				buffer = 2;
//		}
//	}
//
//}
//
//
//int userMain(int argc, char** argv)
//{
//	cout << "Test starts: " << n << " threads." << endl;
//	int i;
//	TestThread threads[n];
//	for(i=0;i<n;i++)
//	{
//		threads[i].start();
//	}
//	for(i=0;i<n;i++)
//	{
//		threads[i].waitToComplete();
//		cout<< Thread::getThreadById(i)->getId() <<" Done!"<< endl;
//	}
//	cout << "Test ends." << endl;
//	return 0;
//}

////////////////////////////////////////////////////////////////////